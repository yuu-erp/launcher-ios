import { INFRASTRUCTURE } from "@core/app.symbols";
import { ApplicationEntity } from "@core/domain/entities/application.entity";
import { type IApplicationRepository } from "@core/domain/repo";
import { NotFoundException } from "@core/exceptions";
import { inject, injectable } from "inversify";
import {
  MoveApplicationCommand,
  MoveApplicationInPort,
} from "../port/move-application.in-port";

@injectable()
export class MoveApplicationInteractor implements MoveApplicationInPort {
  constructor(
    @inject(INFRASTRUCTURE.APPLICATION_STORAGE)
    private readonly applicationReposity: IApplicationRepository
  ) {}

  execute(
    request: MoveApplicationCommand
  ): ApplicationEntity | Promise<ApplicationEntity> {
    const { id, position } = request;
    // üîπ T√¨m ·ª©ng d·ª•ng theo ID (c·∫ßn await v√¨ c√≥ th·ªÉ l√† b·∫•t ƒë·ªìng b·ªô)
    const existingApp = this.applicationReposity.findByID(id);
    if (!existingApp)
      throw new NotFoundException("·ª®ng d·ª•ng kh√¥ng t·ªìn t·∫°i", {
        id,
      });
    // üîπ L·∫•y thu·ªôc t√≠nh hi·ªán t·∫°i c·ªßa ·ª©ng d·ª•ng
    const props = existingApp.getProps();
    // üîπ T·∫°o ·ª©ng d·ª•ng m·ªõi v·ªõi d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const newApplication = ApplicationEntity.create({
      ...props,
      position: position,
    });
    // üîπ C·∫≠p nh·∫≠t ·ª©ng d·ª•ng trong repository v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    this.applicationReposity.update(newApplication);
    return existingApp;
  }
}
